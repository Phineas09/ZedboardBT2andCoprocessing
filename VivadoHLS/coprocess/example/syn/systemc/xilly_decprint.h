// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _xilly_decprint_HH_
#define _xilly_decprint_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "xilly_decprint_pobkb.h"
#include "xilly_decprint_out.h"

namespace ap_rtl {

struct xilly_decprint : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > val_r;
    sc_in< sc_lv<8> > debug_ready;
    sc_out< sc_lv<8> > debug_out;
    sc_out< sc_logic > debug_out_ap_vld;


    // Module declarations
    xilly_decprint(sc_module_name name);
    SC_HAS_PROCESS(xilly_decprint);

    ~xilly_decprint();

    sc_trace_file* mVcdFile;

    xilly_decprint_pobkb* powers10_U;
    xilly_decprint_out* out_U;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > powers10_address0;
    sc_signal< sc_logic > powers10_ce0;
    sc_signal< sc_lv<28> > powers10_q0;
    sc_signal< sc_lv<32> > zext_ln37_fu_139_p1;
    sc_signal< sc_lv<32> > zext_ln37_reg_273;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_fu_149_p2;
    sc_signal< sc_lv<4> > i_reg_282;
    sc_signal< sc_lv<64> > zext_ln39_fu_155_p1;
    sc_signal< sc_lv<64> > zext_ln39_reg_287;
    sc_signal< sc_lv<1> > icmp_ln37_fu_143_p2;
    sc_signal< sc_lv<5> > trunc_ln6_fu_160_p1;
    sc_signal< sc_lv<5> > trunc_ln6_reg_297;
    sc_signal< sc_lv<32> > zext_ln39_1_fu_168_p1;
    sc_signal< sc_lv<32> > zext_ln39_1_reg_302;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > x_fu_180_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > first_1_fu_220_p3;
    sc_signal< sc_lv<1> > icmp_ln39_fu_175_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > add_ln9_fu_241_p2;
    sc_signal< sc_lv<64> > add_ln9_reg_326;
    sc_signal< sc_lv<8> > out_q0;
    sc_signal< sc_lv<8> > out_load_reg_331;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > out_address0;
    sc_signal< sc_logic > out_ce0;
    sc_signal< sc_logic > out_we0;
    sc_signal< sc_lv<8> > out_d0;
    sc_signal< sc_lv<32> > first_0_reg_89;
    sc_signal< sc_lv<4> > first_reg_101;
    sc_signal< sc_lv<8> > x_0_reg_112;
    sc_signal< sc_lv<64> > p_0_rec_i_reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > trunc_ln8_fu_257_p1;
    sc_signal< sc_lv<64> > sum_i_cast_fu_236_p1;
    sc_signal< sc_lv<32> > v_0_fu_34;
    sc_signal< sc_lv<32> > v_fu_186_p2;
    sc_signal< sc_lv<8> > or_ln44_fu_196_p2;
    sc_signal< sc_lv<30> > sext_ln39_fu_164_p1;
    sc_signal< sc_lv<1> > icmp_ln46_fu_203_p2;
    sc_signal< sc_lv<1> > icmp_ln46_1_fu_209_p2;
    sc_signal< sc_lv<1> > and_ln46_fu_214_p2;
    sc_signal< sc_lv<5> > empty_29_fu_227_p1;
    sc_signal< sc_lv<5> > sum_i_fu_231_p2;
    sc_signal< sc_lv<1> > icmp_ln7_fu_247_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_30;
    static const sc_lv<64> ap_const_lv64_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln9_fu_241_p2();
    void thread_and_ln46_fu_214_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_debug_out();
    void thread_debug_out_ap_vld();
    void thread_empty_29_fu_227_p1();
    void thread_first_1_fu_220_p3();
    void thread_i_fu_149_p2();
    void thread_icmp_ln37_fu_143_p2();
    void thread_icmp_ln39_fu_175_p2();
    void thread_icmp_ln46_1_fu_209_p2();
    void thread_icmp_ln46_fu_203_p2();
    void thread_icmp_ln7_fu_247_p2();
    void thread_or_ln44_fu_196_p2();
    void thread_out_address0();
    void thread_out_ce0();
    void thread_out_d0();
    void thread_out_we0();
    void thread_powers10_address0();
    void thread_powers10_ce0();
    void thread_sext_ln39_fu_164_p1();
    void thread_sum_i_cast_fu_236_p1();
    void thread_sum_i_fu_231_p2();
    void thread_trunc_ln6_fu_160_p1();
    void thread_trunc_ln8_fu_257_p1();
    void thread_v_fu_186_p2();
    void thread_x_fu_180_p2();
    void thread_zext_ln37_fu_139_p1();
    void thread_zext_ln39_1_fu_168_p1();
    void thread_zext_ln39_fu_155_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
