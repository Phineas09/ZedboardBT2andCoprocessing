-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xilly_decprint is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_r : IN STD_LOGIC_VECTOR (31 downto 0);
    debug_ready : IN STD_LOGIC_VECTOR (7 downto 0);
    debug_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    debug_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of xilly_decprint is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal powers10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal powers10_ce0 : STD_LOGIC;
    signal powers10_q0 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln37_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln37_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_149_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_282 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln39_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_reg_287 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln37_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_fu_160_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln6_reg_297 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_1_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_1_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_fu_180_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal first_1_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln9_fu_241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln9_reg_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_load_reg_331 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_0_reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_reg_101 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_0_reg_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_rec_i_reg_123 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln8_fu_257_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_cast_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_0_fu_34 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln44_fu_196_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln39_fu_164_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln46_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_29_fu_227_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_i_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln7_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component xilly_decprint_pobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component xilly_decprint_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    powers10_U : component xilly_decprint_pobkb
    generic map (
        DataWidth => 28,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => powers10_address0,
        ce0 => powers10_ce0,
        q0 => powers10_q0);

    out_U : component xilly_decprint_out
    generic map (
        DataWidth => 8,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    first_0_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                first_0_reg_89 <= first_1_fu_220_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                first_0_reg_89 <= ap_const_lv32_9;
            end if; 
        end if;
    end process;

    first_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                first_reg_101 <= i_reg_282;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                first_reg_101 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0_rec_i_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln8_fu_257_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_rec_i_reg_123 <= add_ln9_reg_326;
            elsif (((icmp_ln37_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_rec_i_reg_123 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    v_0_fu_34_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                v_0_fu_34 <= v_fu_186_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                v_0_fu_34 <= val_r;
            end if; 
        end if;
    end process;

    x_0_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_0_reg_112 <= ap_const_lv8_0;
            elsif (((icmp_ln39_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_reg_112 <= x_fu_180_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln9_reg_326 <= add_ln9_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_282 <= i_fu_149_p2;
                    zext_ln37_reg_273(3 downto 0) <= zext_ln37_fu_139_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_load_reg_331 <= out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln6_reg_297 <= trunc_ln6_fu_160_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln39_1_reg_302(29 downto 0) <= zext_ln39_1_fu_168_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln39_reg_287(3 downto 0) <= zext_ln39_fu_155_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln37_reg_273(31 downto 4) <= "0000000000000000000000000000";
    zext_ln39_reg_287(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln39_1_reg_302(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln37_fu_143_p2, ap_CS_fsm_state4, icmp_ln39_fu_175_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, trunc_ln8_fu_257_p1, icmp_ln7_fu_247_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln37_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln39_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln7_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((trunc_ln8_fu_257_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln9_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_0_rec_i_reg_123));
    and_ln46_fu_214_p2 <= (icmp_ln46_fu_203_p2 and icmp_ln46_1_fu_209_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln7_fu_247_p2)
    begin
        if ((((icmp_ln7_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln7_fu_247_p2)
    begin
        if (((icmp_ln7_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    debug_out <= out_load_reg_331;

    debug_out_ap_vld_assign_proc : process(ap_CS_fsm_state7, trunc_ln8_fu_257_p1)
    begin
        if (((trunc_ln8_fu_257_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            debug_out_ap_vld <= ap_const_logic_1;
        else 
            debug_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_29_fu_227_p1 <= p_0_rec_i_reg_123(5 - 1 downto 0);
    first_1_fu_220_p3 <= 
        zext_ln37_reg_273 when (and_ln46_fu_214_p2(0) = '1') else 
        first_0_reg_89;
    i_fu_149_p2 <= std_logic_vector(unsigned(first_reg_101) + unsigned(ap_const_lv4_1));
    icmp_ln37_fu_143_p2 <= "1" when (first_reg_101 = ap_const_lv4_A) else "0";
    icmp_ln39_fu_175_p2 <= "1" when (unsigned(v_0_fu_34) < unsigned(zext_ln39_1_reg_302)) else "0";
    icmp_ln46_1_fu_209_p2 <= "1" when (signed(first_0_reg_89) > signed(zext_ln37_reg_273)) else "0";
    icmp_ln46_fu_203_p2 <= "0" when (x_0_reg_112 = ap_const_lv8_0) else "1";
    icmp_ln7_fu_247_p2 <= "1" when (out_q0 = ap_const_lv8_0) else "0";
    or_ln44_fu_196_p2 <= (x_0_reg_112 or ap_const_lv8_30);

    out_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln39_reg_287, ap_CS_fsm_state4, ap_CS_fsm_state5, sum_i_cast_fu_236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_address0 <= sum_i_cast_fu_236_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_address0 <= zext_ln39_reg_287(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        else 
            out_address0 <= "XXXX";
        end if; 
    end process;


    out_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, or_ln44_fu_196_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_d0 <= or_ln44_fu_196_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_d0 <= ap_const_lv8_0;
        else 
            out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    out_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_143_p2, ap_CS_fsm_state4, icmp_ln39_fu_175_p2)
    begin
        if ((((icmp_ln39_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln37_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    powers10_address0 <= zext_ln39_fu_155_p1(4 - 1 downto 0);

    powers10_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            powers10_ce0 <= ap_const_logic_1;
        else 
            powers10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln39_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(powers10_q0),30));

    sum_i_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_231_p2),64));
    sum_i_fu_231_p2 <= std_logic_vector(unsigned(empty_29_fu_227_p1) + unsigned(trunc_ln6_reg_297));
    trunc_ln6_fu_160_p1 <= first_0_reg_89(5 - 1 downto 0);
    trunc_ln8_fu_257_p1 <= debug_ready(1 - 1 downto 0);
    v_fu_186_p2 <= std_logic_vector(unsigned(v_0_fu_34) - unsigned(zext_ln39_1_reg_302));
    x_fu_180_p2 <= std_logic_vector(unsigned(x_0_reg_112) + unsigned(ap_const_lv8_1));
    zext_ln37_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(first_reg_101),32));
    zext_ln39_1_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln39_fu_164_p1),32));
    zext_ln39_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(first_reg_101),64));
end behav;
