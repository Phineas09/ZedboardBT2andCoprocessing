-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xillybus_wrapper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC;
    debug_ready : IN STD_LOGIC_VECTOR (7 downto 0);
    debug_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    debug_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of xillybus_wrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "xillybus_wrapper,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.665000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=2077,HLS_SYN_LUT=3442,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal p_str3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_str3_ce0 : STD_LOGIC;
    signal p_str3_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_str4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_str4_ce0 : STD_LOGIC;
    signal p_str4_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_str5_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_str5_ce0 : STD_LOGIC;
    signal p_str5_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_2_ce0 : STD_LOGIC;
    signal second_order_float_2_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_3_ce0 : STD_LOGIC;
    signal second_order_float_3_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_s_ce0 : STD_LOGIC;
    signal second_order_float_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln7_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal phi_ln7_2_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln7_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln9_reg_1157 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_reg_1162 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal x1_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln7_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln7_1_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_1_fu_403_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln9_1_reg_1192 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln7_1_fu_409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_1_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln7_2_fu_427_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_2_reg_1210 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal results_sign_V_1_reg_1215 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_1221 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_447_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_1228 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln601_fu_485_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln601_reg_1245 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_V_reg_1253 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln833_1_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_1274 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal trunc_ln_i_i_reg_1280 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_24_fu_568_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_24_reg_1285 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal p_Val2_7_fu_583_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_reg_1291 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_V_fu_634_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_zeros_V_reg_1296 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_V_reg_1302 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal Ex_V_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1309 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_681_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1314 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_695_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1319 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln833_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1325 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1331 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_744_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal B_V_fu_775_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_V_reg_1345 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_trunc_V_reg_1350 : STD_LOGIC_VECTOR (14 downto 0);
    signal B_squared_V_reg_1370 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal t1_V_reg_1375 : STD_LOGIC_VECTOR (28 downto 0);
    signal second_order_float_6_reg_1380 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_8_reg_1385 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1_reg_1390 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln662_1_reg_1395 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln272_1_fu_869_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln272_1_reg_1400 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ret_V_fu_890_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_reg_1405 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_V_reg_1410 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ret_V_9_fu_929_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_9_reg_1415 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln300_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_341_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_341_ap_done : STD_LOGIC;
    signal select_ln311_fu_1065_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_reg_1425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_10_fu_1096_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_10_reg_1430 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_11_fu_1112_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_11_reg_1435 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_scaled_fixed2ieee_fu_341_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_341_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_341_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_xilly_decprint_fu_347_ap_start : STD_LOGIC;
    signal grp_xilly_decprint_fu_347_ap_done : STD_LOGIC;
    signal grp_xilly_decprint_fu_347_ap_idle : STD_LOGIC;
    signal grp_xilly_decprint_fu_347_ap_ready : STD_LOGIC;
    signal grp_xilly_decprint_fu_347_debug_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xilly_decprint_fu_347_debug_out_ap_vld : STD_LOGIC;
    signal phi_ln7_reg_305 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln8_fu_383_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln7_1_reg_316 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln8_1_fu_413_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln8_2_fu_495_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_scaled_fixed2ieee_fu_341_ap_start_reg : STD_LOGIC := '0';
    signal grp_xilly_decprint_fu_347_ap_start_reg : STD_LOGIC := '0';
    signal phi_ln7_cast_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln7_1_cast_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln7_2_cast_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_1_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y1_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_21_fu_1125_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln114_1_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_462_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_470_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln744_fu_504_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_9_fu_507_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_15_fu_523_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_537_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_537_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_537_p2 : STD_LOGIC_VECTOR (103 downto 0);
    signal trunc_ln745_fu_574_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_578_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_i_i_i_fu_590_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_16_fu_600_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_s_fu_608_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_17_fu_618_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln114_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1253_fu_650_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_10_fu_653_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln482_fu_643_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln655_fu_668_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1334_fu_677_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_689_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_716_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal lshr_ln1287_fu_722_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln1287_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_fu_713_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_1_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1310_fu_737_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_basis_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_i_fu_765_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_fu_795_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_fu_1134_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_12_fu_838_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_12_fu_838_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_12_fu_838_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_1141_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_1_fu_875_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_1_fu_878_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_13_fu_881_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln657_fu_887_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_908_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_908_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_14_fu_908_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln272_fu_896_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_2_fu_925_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_20_fu_936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_fu_962_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_968_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1006_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_fu_1044_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_1055_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_940_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_1_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_1_fu_1083_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_2_fu_948_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln300_3_fu_1104_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_3_fu_958_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Repl2_3_fu_1120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_11_fu_1134_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_fu_810_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_11_fu_1134_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_13_fu_1141_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_537_p00 : STD_LOGIC_VECTOR (103 downto 0);
    signal grp_fu_537_p10 : STD_LOGIC_VECTOR (103 downto 0);
    signal r_V_12_fu_838_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_1141_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_908_p10 : STD_LOGIC_VECTOR (57 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (28 downto 0);
        prescale : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component xilly_decprint IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        val_r : IN STD_LOGIC_VECTOR (31 downto 0);
        debug_ready : IN STD_LOGIC_VECTOR (7 downto 0);
        debug_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        debug_out_ap_vld : OUT STD_LOGIC );
    end component;


    component xillybus_wrapper_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (103 downto 0) );
    end component;


    component xillybus_wrapper_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component xillybus_wrapper_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component xillybus_wrapper_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component xillybus_wrapper_ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component xillybus_wrapper_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component xillybus_wrapper_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component xillybus_wrapper_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component xillybus_wrapper_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component xillybus_wrapper_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component xillybus_wrapper_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component xillybus_wrapper_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    p_str3_U : component xillybus_wrapper_cud
    generic map (
        DataWidth => 7,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str3_address0,
        ce0 => p_str3_ce0,
        q0 => p_str3_q0);

    p_str4_U : component xillybus_wrapper_dEe
    generic map (
        DataWidth => 7,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str4_address0,
        ce0 => p_str4_ce0,
        q0 => p_str4_q0);

    p_str5_U : component xillybus_wrapper_eOg
    generic map (
        DataWidth => 4,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str5_address0,
        ce0 => p_str5_ce0,
        q0 => p_str5_q0);

    ref_4oPi_table_100_V_U : component xillybus_wrapper_fYi
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_2_U : component xillybus_wrapper_g8j
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_2_address0,
        ce0 => second_order_float_2_ce0,
        q0 => second_order_float_2_q0);

    second_order_float_3_U : component xillybus_wrapper_hbi
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_3_address0,
        ce0 => second_order_float_3_ce0,
        q0 => second_order_float_3_q0);

    second_order_float_s_U : component xillybus_wrapper_ibs
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_s_address0,
        ce0 => second_order_float_s_ce0,
        q0 => second_order_float_s_q0);

    grp_scaled_fixed2ieee_fu_341 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_fu_341_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_341_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_341_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_341_ap_ready,
        in_V => result_V_reg_1410,
        prescale => ret_V_9_reg_1415,
        ap_return => grp_scaled_fixed2ieee_fu_341_ap_return);

    grp_xilly_decprint_fu_347 : component xilly_decprint
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xilly_decprint_fu_347_ap_start,
        ap_done => grp_xilly_decprint_fu_347_ap_done,
        ap_idle => grp_xilly_decprint_fu_347_ap_idle,
        ap_ready => grp_xilly_decprint_fu_347_ap_ready,
        val_r => x1_reg_1167,
        debug_ready => debug_ready,
        debug_out => grp_xilly_decprint_fu_347_debug_out,
        debug_out_ap_vld => grp_xilly_decprint_fu_347_debug_out_ap_vld);

    xillybus_wrapper_jbC_U8 : component xillybus_wrapper_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 104)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_537_p0,
        din1 => grp_fu_537_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_537_p2);

    xillybus_wrapper_kbM_U9 : component xillybus_wrapper_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_24_reg_1285,
        dout => cos_basis_fu_744_p10);

    xillybus_wrapper_lbW_U10 : component xillybus_wrapper_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_962_p3,
        dout => tmp_fu_968_p18);

    xillybus_wrapper_lbW_U11 : component xillybus_wrapper_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_962_p3,
        dout => tmp_1_fu_1006_p18);

    xillybus_wrapper_mb6_U12 : component xillybus_wrapper_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_11_fu_1134_p0,
        din1 => r_V_11_fu_1134_p1,
        dout => r_V_11_fu_1134_p2);

    xillybus_wrapper_ncg_U13 : component xillybus_wrapper_ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_13_fu_1141_p0,
        din1 => second_order_float_8_reg_1385,
        dout => r_V_13_fu_1141_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_fu_341_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_fu_341_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_scaled_fixed2ieee_fu_341_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_fu_341_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_fu_341_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xilly_decprint_fu_347_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xilly_decprint_fu_347_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln7_1_reg_1188 = ap_const_lv1_1))) then 
                    grp_xilly_decprint_fu_347_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xilly_decprint_fu_347_ap_ready = ap_const_logic_1)) then 
                    grp_xilly_decprint_fu_347_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    phi_ln7_1_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (trunc_ln8_1_fu_413_p1 = ap_const_lv1_1))) then 
                phi_ln7_1_reg_316 <= add_ln9_1_reg_1192;
            elsif (((in_r_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln7_1_reg_316 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln7_2_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (trunc_ln8_2_fu_495_p1 = ap_const_lv1_1))) then 
                phi_ln7_2_reg_327 <= ap_const_lv1_1;
            elsif (((grp_xilly_decprint_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_ln7_2_reg_327 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    phi_ln7_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln8_fu_383_p1 = ap_const_lv1_1))) then 
                phi_ln7_reg_305 <= add_ln9_reg_1157;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                phi_ln7_reg_305 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                B_V_reg_1345 <= B_V_fu_775_p1;
                B_trunc_V_reg_1350 <= select_ln1310_fu_737_p3(21 downto 7);
                cos_basis_reg_1338 <= cos_basis_fu_744_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                B_squared_V_reg_1370 <= r_V_11_fu_1134_p2(29 downto 15);
                second_order_float_6_reg_1380 <= second_order_float_3_q0;
                second_order_float_8_reg_1385 <= second_order_float_s_q0;
                t1_V_reg_1375 <= second_order_float_2_q0(29 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                Ex_V_reg_1309 <= Ex_V_fu_671_p2;
                Mx_V_reg_1302 <= r_V_10_fu_653_p2(57 downto 29);
                icmp_ln833_2_reg_1331 <= icmp_ln833_2_fu_708_p2;
                icmp_ln833_reg_1325 <= icmp_ln833_fu_703_p2;
                isNeg_reg_1314 <= Ex_V_fu_671_p2(7 downto 7);
                ush_reg_1319 <= ush_fu_695_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                Med_V_reg_1253 <= r_V_9_fu_507_p2(99 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                Mx_zeros_V_reg_1296 <= Mx_zeros_V_fu_634_p1;
                p_Val2_24_reg_1285 <= p_Val2_24_fu_568_p3;
                p_Val2_7_reg_1291 <= p_Val2_7_fu_583_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln9_1_reg_1192 <= add_ln9_1_fu_403_p2;
                icmp_ln7_1_reg_1188 <= icmp_ln7_1_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln9_reg_1157 <= add_ln9_fu_373_p2;
                icmp_ln7_reg_1153 <= icmp_ln7_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scaled_fixed2ieee_fu_341_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                and_ln300_reg_1420 <= and_ln300_fu_1051_p2;
                ret_V_10_reg_1430 <= ret_V_10_fu_1096_p3;
                ret_V_11_reg_1435 <= ret_V_11_fu_1112_p3;
                select_ln311_reg_1425 <= select_ln311_fu_1065_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) then
                closepath_reg_1234 <= closepath_fu_450_p2;
                results_sign_V_1_reg_1215 <= tmp_8_reg_1176(31 downto 31);
                tmp_V_1_reg_1228 <= tmp_V_1_fu_447_p1;
                tmp_V_reg_1221 <= tmp_8_reg_1176(30 downto 23);
                trunc_ln601_reg_1245 <= trunc_ln601_fu_485_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                icmp_ln833_1_reg_1268 <= icmp_ln833_1_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_Val2_s_reg_1274 <= grp_fu_537_p2(76 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                result_V_reg_1410 <= r_V_14_fu_908_p2(57 downto 29);
                ret_V_9_reg_1415 <= ret_V_9_fu_929_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                ret_V_reg_1405 <= ret_V_fu_890_p2;
                select_ln272_1_reg_1400 <= select_ln272_1_fu_869_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_r_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_8_reg_1176 <= in_r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                trunc_ln1_reg_1390 <= r_V_12_fu_838_p2(44 downto 23);
                trunc_ln662_1_reg_1395 <= r_V_13_fu_1141_p2(29 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (closepath_reg_1234 = ap_const_lv1_0))) then
                trunc_ln_i_i_reg_1280 <= grp_fu_537_p2(79 downto 77);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_r_empty_n = ap_const_logic_0) and (icmp_ln7_reg_1153 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln7_reg_1153 = ap_const_lv1_1))) then
                x1_reg_1167 <= in_r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    zext_ln7_1_reg_1197(6 downto 0) <= zext_ln7_1_fu_409_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    zext_ln7_2_reg_1210(3 downto 0) <= zext_ln7_2_fu_427_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((in_r_empty_n = ap_const_logic_0) and (icmp_ln7_reg_1153 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln7_reg_1162(6 downto 0) <= zext_ln7_fu_379_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln7_reg_1162(7) <= '0';
    zext_ln7_1_reg_1197(7) <= '0';
    zext_ln7_2_reg_1210(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (in_r_empty_n, out_r_full_n, ap_CS_fsm, ap_CS_fsm_state3, icmp_ln7_reg_1153, ap_CS_fsm_state5, ap_CS_fsm_state11, phi_ln7_2_reg_327, ap_CS_fsm_state27, icmp_ln7_1_reg_1188, ap_CS_fsm_state7, ap_CS_fsm_state26, grp_scaled_fixed2ieee_fu_341_ap_done, grp_xilly_decprint_fu_347_ap_done, ap_CS_fsm_state4, trunc_ln8_fu_383_p1, ap_CS_fsm_state8, trunc_ln8_1_fu_413_p1, ap_CS_fsm_state9, ap_CS_fsm_state12, trunc_ln8_2_fu_495_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((in_r_empty_n = ap_const_logic_0) and (icmp_ln7_reg_1153 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln7_reg_1153 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((in_r_empty_n = ap_const_logic_0) and (icmp_ln7_reg_1153 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln7_reg_1153 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln8_fu_383_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((in_r_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln7_1_reg_1188 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (trunc_ln8_1_fu_413_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((grp_xilly_decprint_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not(((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (phi_ln7_2_reg_327 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (trunc_ln8_2_fu_495_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_scaled_fixed2ieee_fu_341_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_V_fu_775_p1 <= select_ln1310_fu_737_p3(22 - 1 downto 0);
    Ex_V_fu_671_p2 <= std_logic_vector(unsigned(select_ln482_fu_643_p3) - unsigned(zext_ln655_fu_668_p1));
    Mx_bits_V_1_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(p_Val2_s_reg_1274));
    Mx_zeros_V_fu_634_p1 <= val_assign_fu_626_p3(5 - 1 downto 0);
    add_ln114_1_fu_456_p2 <= std_logic_vector(signed(ap_const_lv8_C2) + signed(tmp_V_fu_438_p4));
    add_ln114_fu_638_p2 <= std_logic_vector(signed(ap_const_lv8_83) + signed(tmp_V_reg_1221));
    add_ln9_1_fu_403_p2 <= std_logic_vector(unsigned(phi_ln7_1_reg_316) + unsigned(ap_const_lv2_1));
    add_ln9_fu_373_p2 <= std_logic_vector(unsigned(phi_ln7_reg_305) + unsigned(ap_const_lv4_1));
    addr_V_fu_462_p3 <= 
        ap_const_lv8_3F when (closepath_fu_450_p2(0) = '1') else 
        add_ln114_1_fu_456_p2;
    and_ln300_1_fu_1073_p2 <= (icmp_ln833_reg_1325 and icmp_ln833_1_reg_1268);
    and_ln300_fu_1051_p2 <= (icmp_ln833_reg_1325 and icmp_ln833_1_reg_1268);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_assign_proc : process(out_r_full_n, phi_ln7_2_reg_327)
    begin
                ap_block_state11 <= ((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1));
    end process;


    ap_block_state3_assign_proc : process(in_r_empty_n, icmp_ln7_reg_1153)
    begin
                ap_block_state3 <= ((in_r_empty_n = ap_const_logic_0) and (icmp_ln7_reg_1153 = ap_const_lv1_1));
    end process;

    closepath_fu_450_p2 <= "1" when (unsigned(tmp_V_fu_438_p4) < unsigned(ap_const_lv8_7E)) else "0";

    debug_out_assign_proc : process(zext_ln7_reg_1162, zext_ln7_1_reg_1197, zext_ln7_2_reg_1210, grp_xilly_decprint_fu_347_debug_out, grp_xilly_decprint_fu_347_debug_out_ap_vld, ap_CS_fsm_state4, trunc_ln8_fu_383_p1, ap_CS_fsm_state8, trunc_ln8_1_fu_413_p1, ap_CS_fsm_state9, ap_CS_fsm_state12, trunc_ln8_2_fu_495_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (trunc_ln8_2_fu_495_p1 = ap_const_lv1_1))) then 
            debug_out <= zext_ln7_2_reg_1210;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (trunc_ln8_1_fu_413_p1 = ap_const_lv1_1))) then 
            debug_out <= zext_ln7_1_reg_1197;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln8_fu_383_p1 = ap_const_lv1_1))) then 
            debug_out <= zext_ln7_reg_1162;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_xilly_decprint_fu_347_debug_out_ap_vld = ap_const_logic_1))) then 
            debug_out <= grp_xilly_decprint_fu_347_debug_out;
        else 
            debug_out <= "XXXXXXXX";
        end if; 
    end process;


    debug_out_ap_vld_assign_proc : process(grp_xilly_decprint_fu_347_debug_out_ap_vld, ap_CS_fsm_state4, trunc_ln8_fu_383_p1, ap_CS_fsm_state8, trunc_ln8_1_fu_413_p1, ap_CS_fsm_state9, ap_CS_fsm_state12, trunc_ln8_2_fu_495_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (trunc_ln8_2_fu_495_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (trunc_ln8_1_fu_413_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln8_fu_383_p1 = ap_const_lv1_1)))) then 
            debug_out_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            debug_out_ap_vld <= grp_xilly_decprint_fu_347_debug_out_ap_vld;
        else 
            debug_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_537_p0 <= grp_fu_537_p00(80 - 1 downto 0);
    grp_fu_537_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Med_V_reg_1253),104));
    grp_fu_537_p1 <= grp_fu_537_p10(24 - 1 downto 0);
    grp_fu_537_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_15_fu_523_p3),104));
    grp_scaled_fixed2ieee_fu_341_ap_start <= grp_scaled_fixed2ieee_fu_341_ap_start_reg;
    grp_xilly_decprint_fu_347_ap_start <= grp_xilly_decprint_fu_347_ap_start_reg;
    icmp_ln7_1_fu_397_p2 <= "1" when (phi_ln7_1_reg_316 = ap_const_lv2_3) else "0";
    icmp_ln7_fu_367_p2 <= "1" when (phi_ln7_reg_305 = ap_const_lv4_D) else "0";
    icmp_ln833_1_fu_543_p2 <= "1" when (tmp_V_1_reg_1228 = ap_const_lv23_0) else "0";
    icmp_ln833_2_fu_708_p2 <= "1" when (tmp_V_reg_1221 = ap_const_lv8_FF) else "0";
    icmp_ln833_fu_703_p2 <= "1" when (tmp_V_reg_1221 = ap_const_lv8_0) else "0";

    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, icmp_ln7_reg_1153, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln7_reg_1153 = ap_const_lv1_1)))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, icmp_ln7_reg_1153, ap_CS_fsm_state5)
    begin
        if ((((in_r_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((in_r_empty_n = ap_const_logic_0) and (icmp_ln7_reg_1153 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln7_reg_1153 = ap_const_lv1_1)))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_681_p3 <= Ex_V_fu_671_p2(7 downto 7);
        lhs_V_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_reg_1375),30));

    lshr_ln1287_fu_722_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1302),to_integer(unsigned('0' & sext_ln1311_1_fu_716_p1(29-1 downto 0)))));
    or_ln300_fu_1091_p2 <= (icmp_ln833_2_reg_1331 or and_ln300_fu_1051_p2);
    or_ln311_fu_1060_p2 <= (select_ln271_fu_1044_p3 or icmp_ln833_2_reg_1331);

    out_r_blk_n_assign_proc : process(out_r_full_n, ap_CS_fsm_state11, phi_ln7_2_reg_327, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (phi_ln7_2_reg_327 = ap_const_lv1_1)))) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_din_assign_proc : process(out_r_full_n, ap_CS_fsm_state11, phi_ln7_2_reg_327, ap_CS_fsm_state27, y1_fu_489_p2, p_Result_21_fu_1125_p4)
    begin
        if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            out_r_din <= p_Result_21_fu_1125_p4;
        elsif ((not(((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) then 
            out_r_din <= y1_fu_489_p2;
        else 
            out_r_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_write_assign_proc : process(out_r_full_n, ap_CS_fsm_state11, phi_ln7_2_reg_327, ap_CS_fsm_state27)
    begin
        if ((((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (phi_ln7_2_reg_327 = ap_const_lv1_1)))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Repl2_3_fu_1120_p3 <= 
        results_sign_V_1_reg_1215 when (and_ln300_reg_1420(0) = '1') else 
        select_ln311_reg_1425;
    p_Result_15_fu_523_p3 <= (ap_const_lv1_1 & tmp_V_1_reg_1228);
    p_Result_16_fu_600_p3 <= (p_Result_i_i_i_fu_590_p4 & ap_const_lv1_1);
    p_Result_17_fu_618_p3 <= (ap_const_lv2_3 & p_Result_s_fu_608_p4);
    p_Result_18_fu_795_p3 <= (sin_basis_fu_789_p2 & p_Result_i_i_fu_765_p4);
    p_Result_19_fu_940_p3 <= p_Val2_20_fu_936_p1(31 downto 31);
    p_Result_20_fu_962_p3 <= (results_sign_V_1_reg_1215 & p_Val2_24_reg_1285);
    p_Result_21_fu_1125_p4 <= ((p_Repl2_3_fu_1120_p3 & ret_V_10_reg_1430) & ret_V_11_reg_1435);
    p_Result_i_i_fu_765_p4 <= select_ln1310_fu_737_p3(28 downto 22);
    p_Result_i_i_i_fu_590_p4 <= p_Val2_7_fu_583_p3(57 downto 29);
    
    p_Result_s_fu_608_p4_proc : process(p_Result_16_fu_600_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_s_fu_608_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_16_fu_600_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_s_fu_608_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_s_fu_608_p4_i) := p_Result_16_fu_600_p3(30-1-p_Result_s_fu_608_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_608_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Val2_20_fu_936_p1 <= grp_scaled_fixed2ieee_fu_341_ap_return;
    p_Val2_24_fu_568_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1234(0) = '1') else 
        trunc_ln_i_i_reg_1280;
    p_Val2_7_fu_583_p3 <= 
        Mx_bits_V_1_fu_578_p2 when (trunc_ln745_fu_574_p1(0) = '1') else 
        p_Val2_s_reg_1274;
    p_str3_address0 <= phi_ln7_cast_fu_362_p1(4 - 1 downto 0);

    p_str3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_str3_ce0 <= ap_const_logic_1;
        else 
            p_str3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str4_address0 <= phi_ln7_1_cast_fu_392_p1(2 - 1 downto 0);

    p_str4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_str4_ce0 <= ap_const_logic_1;
        else 
            p_str4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str5_address0 <= phi_ln7_2_cast_fu_422_p1(1 - 1 downto 0);

    p_str5_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            p_str5_ce0 <= ap_const_logic_1;
        else 
            p_str5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    phi_ln7_1_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln7_1_reg_316),64));
    phi_ln7_2_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln7_2_reg_327),64));
    phi_ln7_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln7_reg_305),64));
    r_V_10_fu_653_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_7_reg_1291),to_integer(unsigned('0' & zext_ln1253_fu_650_p1(31-1 downto 0)))));
    r_V_11_fu_1134_p0 <= r_V_fu_810_p1(15 - 1 downto 0);
    r_V_11_fu_1134_p1 <= r_V_fu_810_p1(15 - 1 downto 0);
    r_V_12_fu_838_p0 <= second_order_float_6_reg_1380;
    r_V_12_fu_838_p1 <= r_V_12_fu_838_p10(22 - 1 downto 0);
    r_V_12_fu_838_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1345),45));
    r_V_12_fu_838_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_12_fu_838_p0) * signed('0' &r_V_12_fu_838_p1))), 45));
    r_V_13_fu_1141_p0 <= r_V_13_fu_1141_p00(15 - 1 downto 0);
    r_V_13_fu_1141_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1370),30));
    r_V_14_fu_908_p0 <= ret_V_reg_1405;
    r_V_14_fu_908_p1 <= r_V_14_fu_908_p10(29 - 1 downto 0);
    r_V_14_fu_908_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln272_1_reg_1400),58));
    r_V_14_fu_908_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_14_fu_908_p0) * signed('0' &r_V_14_fu_908_p1))), 58));
    r_V_9_fu_507_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & zext_ln744_fu_504_p1(31-1 downto 0)))));
    r_V_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_reg_1350),30));
    ref_4oPi_table_100_V_address0 <= zext_ln498_fu_480_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(out_r_full_n, ap_CS_fsm_state11, phi_ln7_2_reg_327)
    begin
        if ((not(((out_r_full_n = ap_const_logic_0) and (phi_ln7_2_reg_327 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_10_fu_1096_p3 <= 
        select_ln300_1_fu_1083_p3 when (or_ln300_fu_1091_p2(0) = '1') else 
        tmp_V_2_fu_948_p4;
    ret_V_11_fu_1112_p3 <= 
        select_ln300_3_fu_1104_p3 when (or_ln300_fu_1091_p2(0) = '1') else 
        tmp_V_3_fu_958_p1;
    ret_V_13_fu_881_p2 <= std_logic_vector(signed(lhs_V_1_fu_875_p1) + signed(rhs_V_1_fu_878_p1));
    ret_V_9_fu_929_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_2_fu_925_p1));
    ret_V_fu_890_p2 <= std_logic_vector(unsigned(ret_V_13_fu_881_p2) + unsigned(sext_ln657_fu_887_p1));
        rhs_V_1_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1390),30));

        rhs_V_2_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln272_fu_896_p3),9));

    second_order_float_2_address0 <= zext_ln498_1_fu_803_p1(8 - 1 downto 0);

    second_order_float_2_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            second_order_float_2_ce0 <= ap_const_logic_1;
        else 
            second_order_float_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_3_address0 <= zext_ln498_1_fu_803_p1(8 - 1 downto 0);

    second_order_float_3_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            second_order_float_3_ce0 <= ap_const_logic_1;
        else 
            second_order_float_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_s_address0 <= zext_ln498_1_fu_803_p1(8 - 1 downto 0);

    second_order_float_s_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            second_order_float_s_ce0 <= ap_const_logic_1;
        else 
            second_order_float_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1310_fu_737_p3 <= 
        zext_ln1287_1_fu_727_p1 when (isNeg_reg_1314(0) = '1') else 
        shl_ln1253_fu_731_p2;
    select_ln271_fu_1044_p3 <= 
        tmp_fu_968_p18 when (cos_basis_reg_1338(0) = '1') else 
        tmp_1_fu_1006_p18;
    select_ln272_1_fu_869_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1338(0) = '1') else 
        Mx_V_reg_1302;
    select_ln272_fu_896_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1338(0) = '1') else 
        Ex_V_reg_1309;
    select_ln300_1_fu_1083_p3 <= 
        ap_const_lv8_FF when (xor_ln300_fu_1077_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln300_3_fu_1104_p3 <= 
        ap_const_lv23_7FFFFF when (xor_ln300_fu_1077_p2(0) = '1') else 
        ap_const_lv23_0;
    select_ln311_fu_1065_p3 <= 
        xor_ln311_fu_1055_p2 when (or_ln311_fu_1060_p2(0) = '1') else 
        p_Result_19_fu_940_p3;
    select_ln482_fu_643_p3 <= 
        add_ln114_fu_638_p2 when (closepath_reg_1234(0) = '1') else 
        ap_const_lv8_0;
        sext_ln1311_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1319),29));

        sext_ln1311_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1319),32));

        sext_ln1334_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_671_p2),9));

        sext_ln657_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln662_1_reg_1395),30));

    shl_ln1253_fu_731_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1287_fu_719_p1),to_integer(unsigned('0' & sext_ln1311_fu_713_p1(31-1 downto 0)))));
    sin_basis_fu_789_p2 <= (cos_basis_fu_744_p10 xor ap_const_lv1_1);
    sub_ln1311_fu_689_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln1334_fu_677_p1));
    tmp_3_fu_470_p4 <= addr_V_fu_462_p3(7 downto 4);
    tmp_V_1_fu_447_p1 <= tmp_8_reg_1176(23 - 1 downto 0);
    tmp_V_2_fu_948_p4 <= p_Val2_20_fu_936_p1(30 downto 23);
    tmp_V_3_fu_958_p1 <= p_Val2_20_fu_936_p1(23 - 1 downto 0);
    tmp_V_fu_438_p4 <= tmp_8_reg_1176(30 downto 23);
    trunc_ln601_fu_485_p1 <= addr_V_fu_462_p3(4 - 1 downto 0);
    trunc_ln745_fu_574_p1 <= p_Val2_24_fu_568_p3(1 - 1 downto 0);
    trunc_ln8_1_fu_413_p1 <= debug_ready(1 - 1 downto 0);
    trunc_ln8_2_fu_495_p1 <= debug_ready(1 - 1 downto 0);
    trunc_ln8_fu_383_p1 <= debug_ready(1 - 1 downto 0);
    ush_fu_695_p3 <= 
        sub_ln1311_fu_689_p2 when (isNeg_fu_681_p3(0) = '1') else 
        sext_ln1334_fu_677_p1;
    
    val_assign_fu_626_p3_proc : process(p_Result_17_fu_618_p3)
    begin
        val_assign_fu_626_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_17_fu_618_p3(i) = '1' then
                val_assign_fu_626_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    xor_ln300_fu_1077_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1073_p2);
    xor_ln311_fu_1055_p2 <= (icmp_ln833_2_reg_1331 xor ap_const_lv1_1);
    y1_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(x1_reg_1167));
    zext_ln1253_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1296),58));
    zext_ln1287_1_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1287_fu_722_p2),32));
    zext_ln1287_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_1302),32));
    zext_ln498_1_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_795_p3),64));
    zext_ln498_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_470_p4),64));
    zext_ln655_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1296),8));
    zext_ln744_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln601_reg_1245),100));
    zext_ln7_1_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_str4_q0),8));
    zext_ln7_2_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_str5_q0),8));
    zext_ln7_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_str3_q0),8));
end behav;
